Elapsed Time: 6.913s
    Paused Time: 0s
Effective CPU Utilization: 1.5% (1.107 out of 76 logical CPUs)
 | The metric value is low, which may signal a poor logical CPU cores
 | utilization caused by load imbalance, threading runtime overhead, contended
 | synchronization, or thread/process underutilization. Explore sub-metrics to
 | estimate the efficiency of MPI and OpenMP parallelism or run the Locks and
 | Waits analysis to identify parallel bottlenecks for other parallel runtimes.
 |
    Total Thread Count: 16
     | The number of threads in the application is significantly lower than the
     | number of logical cores on the machine. Check if it is resulted by thread
     | number hard coding that limits application scalability.
     |
        Thread Oversubscription: 0s (0.0% of CPU Time)
    Wait Time with poor CPU Utilization: 98.126s (100.0% of Wait Time)

        Top Waiting Objects
        Sync Object                                                    Wait Time with poor CPU Utilization  (% from Object Wait Time)(%)  Wait Count
        -------------------------------------------------------------  -----------------------------------  ----------------------------  ----------
        Condition Variable 0x4b5f7eac                                                              98.126s                        100.0%          21
        Stream /proc/cpuinfo 0x5e38b8d1                                                             0.000s                        100.0%           1
        Stream /proc/sys/vm/nr_hugepages 0x8d515dba                                                 0.000s                        100.0%           1
        Stream /sys/kernel/mm/transparent_hugepage/enabled 0xc3cb45c7                               0.000s                        100.0%           1
        Stream /proc/meminfo 0x81dc6612                                                             0.000s                        100.0%           1
    Spin and Overhead Time: 2.970s (28.0% of CPU Time)
     | The threading runtime function related to time spent on imbalance or
     | serial spinning consumed a significant amount of CPU time. This can be
     | caused by a load imbalance, insufficient concurrency for all working
     | threads, or busy waits of worker threads while serial code is executed.
     | If there is an imbalance, apply dynamic work scheduling or reduce the
     | size of work chunks or tasks. If there is insufficient concurrency,
     | consider collapsing the outer and inner loops. If there is a wait for
     | completion of serial code, explore options for parallelization with Intel
     | Advisor, algorithm, or microarchitecture tuning of the application's
     | serial code with VTune Profiler Basic Hotspots or Microarchitecture
     | Exploration analysis respectively. For OpenMP* applications, use the Per-
     | Barrier OpenMP Potential Gain metric set in the HPC Performance
     | Characterization analysis to discover the reason for high imbalance or
     | serial spin time.
     |

        Top Functions with Spin or Overhead Time
        Function                       Module           Spin and Overhead Time  (% from CPU Time)(%)
        -----------------------------  ---------------  ----------------------  --------------------
        __kmp_fork_barrier             libiomp5.so                      2.940s                 27.7%
        __kmp_api_omp_get_max_threads  libiomp5.so                      0.020s                  0.2%
        pthread_create                 libpthread.so.0                  0.010s                  0.1%
Collection and Platform Info
    Application Command Line: ./heat_diffusion_openmp_benchmark "--width" "100000" "--height" "100000" "--frames" "1000" "--runs" "1" 
    Operating System: 4.18.0-553.34.1.el8_10.x86_64 Unix/Linux
    Computer Name: cpu-q-187
    Result Size: 4.3 MB 
    Collection start time: 20:09:41 23/03/2025 UTC
    Collection stop time: 20:09:49 23/03/2025 UTC
    Collector Type: User-mode sampling and tracing
    CPU
        Name: Intel(R) Xeon(R) Processor code named Icelake
        Frequency
        Logical CPU Count: 76
        Cache Allocation Technology
            Level 2 capability: not detected
            Level 3 capability: available

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.
